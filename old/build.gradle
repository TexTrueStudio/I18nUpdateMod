buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'com.github.johnrengelman.shadow'

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    shadow 'org.apache.httpcomponents:httpmime:4.3.3'

    testCompile "junit:junit:4.12"
    shadow fileTree(dir: 'libs', include: ['*.jar'])
    shadow 'org.slf4j:slf4j-api:1.7.5'
    shadow 'org.slf4j:slf4j-simple:1.7.21'
}

shadowJar {
    configurations = [project.configurations.shadow]

    relocate "org.apache.http.entity.mime", "org.cfpa.i18nupdatemod.repack.org.apache.http.entity.mime"
    relocate "org.slf4j", "org.cfpa.i18nupdatemod.repack.org.slf4j"
    classifier = null
    dependencies {
        exclude(dependency('org.apache.httpcomponents:httpclient:4.3.3'))
        exclude(dependency('org.apache.httpcomponents:httpcore:4.3.2'))
        exclude(dependency('commons-codec:commons-codec:1.6'))
        exclude(dependency('commons-logging:commons-logging:1.2'))
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "i18n-nlts",
            "Specification-Vendor": "textrue",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'FMLAT': 'i18nmod_at.cfg'
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
